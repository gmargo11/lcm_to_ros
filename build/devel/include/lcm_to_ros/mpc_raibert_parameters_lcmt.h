// Generated by gencpp from file lcm_to_ros/mpc_raibert_parameters_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_MPC_RAIBERT_PARAMETERS_LCMT_H
#define LCM_TO_ROS_MESSAGE_MPC_RAIBERT_PARAMETERS_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct mpc_raibert_parameters_lcmt_
{
  typedef mpc_raibert_parameters_lcmt_<ContainerAllocator> Type;

  mpc_raibert_parameters_lcmt_()
    : vel_cmd()
    , vel_rpy_cmd()
    , fp_rel_cmd()
    , fh_rel_cmd()
    , footswing_height(0.0)
    , iterationsBetweenMPC(0)
    , mpc_table_update()
    , vel_table_update()
    , vel_rpy_table_update()
    , iterations_table_update()
    , planningHorizon(0)
    , adaptationHorizon(0)
    , adaptationSteps(0)
    , timestamp_us(0)
    , id(0)  {
      vel_cmd.assign(0.0);

      vel_rpy_cmd.assign(0.0);

      fp_rel_cmd.assign(0.0);

      fh_rel_cmd.assign(0.0);

      mpc_table_update.assign(0);

      vel_table_update.assign(0.0);

      vel_rpy_table_update.assign(0.0);

      iterations_table_update.assign(0);
  }
  mpc_raibert_parameters_lcmt_(const ContainerAllocator& _alloc)
    : vel_cmd()
    , vel_rpy_cmd()
    , fp_rel_cmd()
    , fh_rel_cmd()
    , footswing_height(0.0)
    , iterationsBetweenMPC(0)
    , mpc_table_update()
    , vel_table_update()
    , vel_rpy_table_update()
    , iterations_table_update()
    , planningHorizon(0)
    , adaptationHorizon(0)
    , adaptationSteps(0)
    , timestamp_us(0)
    , id(0)  {
  (void)_alloc;
      vel_cmd.assign(0.0);

      vel_rpy_cmd.assign(0.0);

      fp_rel_cmd.assign(0.0);

      fh_rel_cmd.assign(0.0);

      mpc_table_update.assign(0);

      vel_table_update.assign(0.0);

      vel_rpy_table_update.assign(0.0);

      iterations_table_update.assign(0);
  }



   typedef boost::array<double, 3>  _vel_cmd_type;
  _vel_cmd_type vel_cmd;

   typedef boost::array<double, 3>  _vel_rpy_cmd_type;
  _vel_rpy_cmd_type vel_rpy_cmd;

   typedef boost::array<double, 8>  _fp_rel_cmd_type;
  _fp_rel_cmd_type fp_rel_cmd;

   typedef boost::array<double, 4>  _fh_rel_cmd_type;
  _fh_rel_cmd_type fh_rel_cmd;

   typedef double _footswing_height_type;
  _footswing_height_type footswing_height;

   typedef int32_t _iterationsBetweenMPC_type;
  _iterationsBetweenMPC_type iterationsBetweenMPC;

   typedef boost::array<int32_t, 400>  _mpc_table_update_type;
  _mpc_table_update_type mpc_table_update;

   typedef boost::array<float, 300>  _vel_table_update_type;
  _vel_table_update_type vel_table_update;

   typedef boost::array<float, 300>  _vel_rpy_table_update_type;
  _vel_rpy_table_update_type vel_rpy_table_update;

   typedef boost::array<int32_t, 100>  _iterations_table_update_type;
  _iterations_table_update_type iterations_table_update;

   typedef int32_t _planningHorizon_type;
  _planningHorizon_type planningHorizon;

   typedef int32_t _adaptationHorizon_type;
  _adaptationHorizon_type adaptationHorizon;

   typedef int32_t _adaptationSteps_type;
  _adaptationSteps_type adaptationSteps;

   typedef int64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;

   typedef int64_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct mpc_raibert_parameters_lcmt_

typedef ::lcm_to_ros::mpc_raibert_parameters_lcmt_<std::allocator<void> > mpc_raibert_parameters_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::mpc_raibert_parameters_lcmt > mpc_raibert_parameters_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::mpc_raibert_parameters_lcmt const> mpc_raibert_parameters_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator2> & rhs)
{
  return lhs.vel_cmd == rhs.vel_cmd &&
    lhs.vel_rpy_cmd == rhs.vel_rpy_cmd &&
    lhs.fp_rel_cmd == rhs.fp_rel_cmd &&
    lhs.fh_rel_cmd == rhs.fh_rel_cmd &&
    lhs.footswing_height == rhs.footswing_height &&
    lhs.iterationsBetweenMPC == rhs.iterationsBetweenMPC &&
    lhs.mpc_table_update == rhs.mpc_table_update &&
    lhs.vel_table_update == rhs.vel_table_update &&
    lhs.vel_rpy_table_update == rhs.vel_rpy_table_update &&
    lhs.iterations_table_update == rhs.iterations_table_update &&
    lhs.planningHorizon == rhs.planningHorizon &&
    lhs.adaptationHorizon == rhs.adaptationHorizon &&
    lhs.adaptationSteps == rhs.adaptationSteps &&
    lhs.timestamp_us == rhs.timestamp_us &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32f5c3431fb24a8e370f03c4665300a9";
  }

  static const char* value(const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32f5c3431fb24a8eULL;
  static const uint64_t static_value2 = 0x370f03c4665300a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/mpc_raibert_parameters_lcmt";
  }

  static const char* value(const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:01 2021\n"
"#\n"
"#######################################################################\n"
"float64[3]          vel_cmd\n"
"float64[3]          vel_rpy_cmd\n"
"float64[8]          fp_rel_cmd\n"
"float64[4]          fh_rel_cmd\n"
"float64             footswing_height\n"
"int32               iterationsBetweenMPC\n"
"int32[400]          mpc_table_update\n"
"float32[300]        vel_table_update\n"
"float32[300]        vel_rpy_table_update\n"
"int32[100]          iterations_table_update\n"
"int32               planningHorizon\n"
"int32               adaptationHorizon\n"
"int32               adaptationSteps\n"
"int64               timestamp_us\n"
"int64               id\n"
;
  }

  static const char* value(const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_cmd);
      stream.next(m.vel_rpy_cmd);
      stream.next(m.fp_rel_cmd);
      stream.next(m.fh_rel_cmd);
      stream.next(m.footswing_height);
      stream.next(m.iterationsBetweenMPC);
      stream.next(m.mpc_table_update);
      stream.next(m.vel_table_update);
      stream.next(m.vel_rpy_table_update);
      stream.next(m.iterations_table_update);
      stream.next(m.planningHorizon);
      stream.next(m.adaptationHorizon);
      stream.next(m.adaptationSteps);
      stream.next(m.timestamp_us);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mpc_raibert_parameters_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::mpc_raibert_parameters_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "vel_cmd[]" << std::endl;
    for (size_t i = 0; i < v.vel_cmd.size(); ++i)
    {
      s << indent << "  vel_cmd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel_cmd[i]);
    }
    s << indent << "vel_rpy_cmd[]" << std::endl;
    for (size_t i = 0; i < v.vel_rpy_cmd.size(); ++i)
    {
      s << indent << "  vel_rpy_cmd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel_rpy_cmd[i]);
    }
    s << indent << "fp_rel_cmd[]" << std::endl;
    for (size_t i = 0; i < v.fp_rel_cmd.size(); ++i)
    {
      s << indent << "  fp_rel_cmd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.fp_rel_cmd[i]);
    }
    s << indent << "fh_rel_cmd[]" << std::endl;
    for (size_t i = 0; i < v.fh_rel_cmd.size(); ++i)
    {
      s << indent << "  fh_rel_cmd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.fh_rel_cmd[i]);
    }
    s << indent << "footswing_height: ";
    Printer<double>::stream(s, indent + "  ", v.footswing_height);
    s << indent << "iterationsBetweenMPC: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iterationsBetweenMPC);
    s << indent << "mpc_table_update[]" << std::endl;
    for (size_t i = 0; i < v.mpc_table_update.size(); ++i)
    {
      s << indent << "  mpc_table_update[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mpc_table_update[i]);
    }
    s << indent << "vel_table_update[]" << std::endl;
    for (size_t i = 0; i < v.vel_table_update.size(); ++i)
    {
      s << indent << "  vel_table_update[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel_table_update[i]);
    }
    s << indent << "vel_rpy_table_update[]" << std::endl;
    for (size_t i = 0; i < v.vel_rpy_table_update.size(); ++i)
    {
      s << indent << "  vel_rpy_table_update[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel_rpy_table_update[i]);
    }
    s << indent << "iterations_table_update[]" << std::endl;
    for (size_t i = 0; i < v.iterations_table_update.size(); ++i)
    {
      s << indent << "  iterations_table_update[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.iterations_table_update[i]);
    }
    s << indent << "planningHorizon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.planningHorizon);
    s << indent << "adaptationHorizon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adaptationHorizon);
    s << indent << "adaptationSteps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.adaptationSteps);
    s << indent << "timestamp_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_us);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_MPC_RAIBERT_PARAMETERS_LCMT_H
