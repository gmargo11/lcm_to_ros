// Generated by gencpp from file lcm_to_ros/spi_data_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_SPI_DATA_LCMT_H
#define LCM_TO_ROS_MESSAGE_SPI_DATA_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct spi_data_lcmt_
{
  typedef spi_data_lcmt_<ContainerAllocator> Type;

  spi_data_lcmt_()
    : q_abad()
    , q_hip()
    , q_knee()
    , qd_abad()
    , qd_hip()
    , qd_knee()
    , flags()
    , spi_driver_status(0)
    , timestamp_us(0)  {
      q_abad.assign(0.0);

      q_hip.assign(0.0);

      q_knee.assign(0.0);

      qd_abad.assign(0.0);

      qd_hip.assign(0.0);

      qd_knee.assign(0.0);

      flags.assign(0);
  }
  spi_data_lcmt_(const ContainerAllocator& _alloc)
    : q_abad()
    , q_hip()
    , q_knee()
    , qd_abad()
    , qd_hip()
    , qd_knee()
    , flags()
    , spi_driver_status(0)
    , timestamp_us(0)  {
  (void)_alloc;
      q_abad.assign(0.0);

      q_hip.assign(0.0);

      q_knee.assign(0.0);

      qd_abad.assign(0.0);

      qd_hip.assign(0.0);

      qd_knee.assign(0.0);

      flags.assign(0);
  }



   typedef boost::array<float, 4>  _q_abad_type;
  _q_abad_type q_abad;

   typedef boost::array<float, 4>  _q_hip_type;
  _q_hip_type q_hip;

   typedef boost::array<float, 4>  _q_knee_type;
  _q_knee_type q_knee;

   typedef boost::array<float, 4>  _qd_abad_type;
  _qd_abad_type qd_abad;

   typedef boost::array<float, 4>  _qd_hip_type;
  _qd_hip_type qd_hip;

   typedef boost::array<float, 4>  _qd_knee_type;
  _qd_knee_type qd_knee;

   typedef boost::array<int32_t, 4>  _flags_type;
  _flags_type flags;

   typedef int32_t _spi_driver_status_type;
  _spi_driver_status_type spi_driver_status;

   typedef int64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;





  typedef boost::shared_ptr< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct spi_data_lcmt_

typedef ::lcm_to_ros::spi_data_lcmt_<std::allocator<void> > spi_data_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::spi_data_lcmt > spi_data_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::spi_data_lcmt const> spi_data_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator2> & rhs)
{
  return lhs.q_abad == rhs.q_abad &&
    lhs.q_hip == rhs.q_hip &&
    lhs.q_knee == rhs.q_knee &&
    lhs.qd_abad == rhs.qd_abad &&
    lhs.qd_hip == rhs.qd_hip &&
    lhs.qd_knee == rhs.qd_knee &&
    lhs.flags == rhs.flags &&
    lhs.spi_driver_status == rhs.spi_driver_status &&
    lhs.timestamp_us == rhs.timestamp_us;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3eacff808332448ea9893245e4040882";
  }

  static const char* value(const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3eacff808332448eULL;
  static const uint64_t static_value2 = 0xa9893245e4040882ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/spi_data_lcmt";
  }

  static const char* value(const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:01 2021\n"
"#\n"
"#######################################################################\n"
"float32[4]          q_abad\n"
"float32[4]          q_hip\n"
"float32[4]          q_knee\n"
"float32[4]          qd_abad\n"
"float32[4]          qd_hip\n"
"float32[4]          qd_knee\n"
"int32[4]            flags\n"
"int32               spi_driver_status\n"
"int64               timestamp_us\n"
;
  }

  static const char* value(const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q_abad);
      stream.next(m.q_hip);
      stream.next(m.q_knee);
      stream.next(m.qd_abad);
      stream.next(m.qd_hip);
      stream.next(m.qd_knee);
      stream.next(m.flags);
      stream.next(m.spi_driver_status);
      stream.next(m.timestamp_us);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct spi_data_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::spi_data_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "q_abad[]" << std::endl;
    for (size_t i = 0; i < v.q_abad.size(); ++i)
    {
      s << indent << "  q_abad[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q_abad[i]);
    }
    s << indent << "q_hip[]" << std::endl;
    for (size_t i = 0; i < v.q_hip.size(); ++i)
    {
      s << indent << "  q_hip[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q_hip[i]);
    }
    s << indent << "q_knee[]" << std::endl;
    for (size_t i = 0; i < v.q_knee.size(); ++i)
    {
      s << indent << "  q_knee[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q_knee[i]);
    }
    s << indent << "qd_abad[]" << std::endl;
    for (size_t i = 0; i < v.qd_abad.size(); ++i)
    {
      s << indent << "  qd_abad[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.qd_abad[i]);
    }
    s << indent << "qd_hip[]" << std::endl;
    for (size_t i = 0; i < v.qd_hip.size(); ++i)
    {
      s << indent << "  qd_hip[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.qd_hip[i]);
    }
    s << indent << "qd_knee[]" << std::endl;
    for (size_t i = 0; i < v.qd_knee.size(); ++i)
    {
      s << indent << "  qd_knee[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.qd_knee[i]);
    }
    s << indent << "flags[]" << std::endl;
    for (size_t i = 0; i < v.flags.size(); ++i)
    {
      s << indent << "  flags[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.flags[i]);
    }
    s << indent << "spi_driver_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.spi_driver_status);
    s << indent << "timestamp_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_us);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_SPI_DATA_LCMT_H
