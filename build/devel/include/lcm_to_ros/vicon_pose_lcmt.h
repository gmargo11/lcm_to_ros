// Generated by gencpp from file lcm_to_ros/vicon_pose_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_VICON_POSE_LCMT_H
#define LCM_TO_ROS_MESSAGE_VICON_POSE_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct vicon_pose_lcmt_
{
  typedef vicon_pose_lcmt_<ContainerAllocator> Type;

  vicon_pose_lcmt_()
    : translation()
    , rotation()
    , seq(0)
    , stamp_secs(0)
    , stamp_nsecs(0)  {
      translation.assign(0.0);

      rotation.assign(0.0);
  }
  vicon_pose_lcmt_(const ContainerAllocator& _alloc)
    : translation()
    , rotation()
    , seq(0)
    , stamp_secs(0)
    , stamp_nsecs(0)  {
  (void)_alloc;
      translation.assign(0.0);

      rotation.assign(0.0);
  }



   typedef boost::array<float, 3>  _translation_type;
  _translation_type translation;

   typedef boost::array<float, 4>  _rotation_type;
  _rotation_type rotation;

   typedef int32_t _seq_type;
  _seq_type seq;

   typedef int32_t _stamp_secs_type;
  _stamp_secs_type stamp_secs;

   typedef int32_t _stamp_nsecs_type;
  _stamp_nsecs_type stamp_nsecs;





  typedef boost::shared_ptr< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct vicon_pose_lcmt_

typedef ::lcm_to_ros::vicon_pose_lcmt_<std::allocator<void> > vicon_pose_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::vicon_pose_lcmt > vicon_pose_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::vicon_pose_lcmt const> vicon_pose_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator2> & rhs)
{
  return lhs.translation == rhs.translation &&
    lhs.rotation == rhs.rotation &&
    lhs.seq == rhs.seq &&
    lhs.stamp_secs == rhs.stamp_secs &&
    lhs.stamp_nsecs == rhs.stamp_nsecs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e876672954d3cd3f52e018ddac27add5";
  }

  static const char* value(const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe876672954d3cd3fULL;
  static const uint64_t static_value2 = 0x52e018ddac27add5ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/vicon_pose_lcmt";
  }

  static const char* value(const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:01 2021\n"
"#\n"
"#######################################################################\n"
"float32[3]          translation\n"
"float32[4]          rotation\n"
"                    \n"
"int32               seq\n"
"int32               stamp_secs\n"
"int32               stamp_nsecs\n"
;
  }

  static const char* value(const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.translation);
      stream.next(m.rotation);
      stream.next(m.seq);
      stream.next(m.stamp_secs);
      stream.next(m.stamp_nsecs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vicon_pose_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::vicon_pose_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "translation[]" << std::endl;
    for (size_t i = 0; i < v.translation.size(); ++i)
    {
      s << indent << "  translation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.translation[i]);
    }
    s << indent << "rotation[]" << std::endl;
    for (size_t i = 0; i < v.rotation.size(); ++i)
    {
      s << indent << "  rotation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotation[i]);
    }
    s << indent << "seq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp_secs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stamp_secs);
    s << indent << "stamp_nsecs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stamp_nsecs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_VICON_POSE_LCMT_H
