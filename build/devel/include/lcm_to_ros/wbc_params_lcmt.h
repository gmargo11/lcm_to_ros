// Generated by gencpp from file lcm_to_ros/wbc_params_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_WBC_PARAMS_LCMT_H
#define LCM_TO_ROS_MESSAGE_WBC_PARAMS_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct wbc_params_lcmt_
{
  typedef wbc_params_lcmt_<ContainerAllocator> Type;

  wbc_params_lcmt_()
    : pBody_des()
    , vBody_des()
    , aBody_des()
    , pBody_RPY_des()
    , vBody_Ori_des()
    , pFoot_des()
    , vFoot_des()
    , aFoot_des()
    , Fr_des()
    , contact_state()
    , timestamp_us(0)
    , id(0)  {
      pBody_des.assign(0.0);

      vBody_des.assign(0.0);

      aBody_des.assign(0.0);

      pBody_RPY_des.assign(0.0);

      vBody_Ori_des.assign(0.0);

      pFoot_des.assign(0.0);

      vFoot_des.assign(0.0);

      aFoot_des.assign(0.0);

      Fr_des.assign(0.0);

      contact_state.assign(0.0);
  }
  wbc_params_lcmt_(const ContainerAllocator& _alloc)
    : pBody_des()
    , vBody_des()
    , aBody_des()
    , pBody_RPY_des()
    , vBody_Ori_des()
    , pFoot_des()
    , vFoot_des()
    , aFoot_des()
    , Fr_des()
    , contact_state()
    , timestamp_us(0)
    , id(0)  {
  (void)_alloc;
      pBody_des.assign(0.0);

      vBody_des.assign(0.0);

      aBody_des.assign(0.0);

      pBody_RPY_des.assign(0.0);

      vBody_Ori_des.assign(0.0);

      pFoot_des.assign(0.0);

      vFoot_des.assign(0.0);

      aFoot_des.assign(0.0);

      Fr_des.assign(0.0);

      contact_state.assign(0.0);
  }



   typedef boost::array<double, 3>  _pBody_des_type;
  _pBody_des_type pBody_des;

   typedef boost::array<double, 3>  _vBody_des_type;
  _vBody_des_type vBody_des;

   typedef boost::array<double, 3>  _aBody_des_type;
  _aBody_des_type aBody_des;

   typedef boost::array<double, 3>  _pBody_RPY_des_type;
  _pBody_RPY_des_type pBody_RPY_des;

   typedef boost::array<double, 3>  _vBody_Ori_des_type;
  _vBody_Ori_des_type vBody_Ori_des;

   typedef boost::array<double, 12>  _pFoot_des_type;
  _pFoot_des_type pFoot_des;

   typedef boost::array<double, 12>  _vFoot_des_type;
  _vFoot_des_type vFoot_des;

   typedef boost::array<double, 12>  _aFoot_des_type;
  _aFoot_des_type aFoot_des;

   typedef boost::array<double, 12>  _Fr_des_type;
  _Fr_des_type Fr_des;

   typedef boost::array<double, 4>  _contact_state_type;
  _contact_state_type contact_state;

   typedef int64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;

   typedef int64_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct wbc_params_lcmt_

typedef ::lcm_to_ros::wbc_params_lcmt_<std::allocator<void> > wbc_params_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::wbc_params_lcmt > wbc_params_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::wbc_params_lcmt const> wbc_params_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator2> & rhs)
{
  return lhs.pBody_des == rhs.pBody_des &&
    lhs.vBody_des == rhs.vBody_des &&
    lhs.aBody_des == rhs.aBody_des &&
    lhs.pBody_RPY_des == rhs.pBody_RPY_des &&
    lhs.vBody_Ori_des == rhs.vBody_Ori_des &&
    lhs.pFoot_des == rhs.pFoot_des &&
    lhs.vFoot_des == rhs.vFoot_des &&
    lhs.aFoot_des == rhs.aFoot_des &&
    lhs.Fr_des == rhs.Fr_des &&
    lhs.contact_state == rhs.contact_state &&
    lhs.timestamp_us == rhs.timestamp_us &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25f1ef18d3d7aaea9016e50107e5f089";
  }

  static const char* value(const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25f1ef18d3d7aaeaULL;
  static const uint64_t static_value2 = 0x9016e50107e5f089ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/wbc_params_lcmt";
  }

  static const char* value(const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:02 2021\n"
"#\n"
"#######################################################################\n"
"float64[3]          pBody_des\n"
"float64[3]          vBody_des\n"
"float64[3]          aBody_des\n"
"float64[3]          pBody_RPY_des\n"
"float64[3]          vBody_Ori_des\n"
"float64[12]         pFoot_des\n"
"float64[12]         vFoot_des\n"
"float64[12]         aFoot_des\n"
"float64[12]         Fr_des\n"
"float64[4]          contact_state\n"
"int64               timestamp_us\n"
"int64               id\n"
;
  }

  static const char* value(const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pBody_des);
      stream.next(m.vBody_des);
      stream.next(m.aBody_des);
      stream.next(m.pBody_RPY_des);
      stream.next(m.vBody_Ori_des);
      stream.next(m.pFoot_des);
      stream.next(m.vFoot_des);
      stream.next(m.aFoot_des);
      stream.next(m.Fr_des);
      stream.next(m.contact_state);
      stream.next(m.timestamp_us);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wbc_params_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::wbc_params_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "pBody_des[]" << std::endl;
    for (size_t i = 0; i < v.pBody_des.size(); ++i)
    {
      s << indent << "  pBody_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pBody_des[i]);
    }
    s << indent << "vBody_des[]" << std::endl;
    for (size_t i = 0; i < v.vBody_des.size(); ++i)
    {
      s << indent << "  vBody_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vBody_des[i]);
    }
    s << indent << "aBody_des[]" << std::endl;
    for (size_t i = 0; i < v.aBody_des.size(); ++i)
    {
      s << indent << "  aBody_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.aBody_des[i]);
    }
    s << indent << "pBody_RPY_des[]" << std::endl;
    for (size_t i = 0; i < v.pBody_RPY_des.size(); ++i)
    {
      s << indent << "  pBody_RPY_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pBody_RPY_des[i]);
    }
    s << indent << "vBody_Ori_des[]" << std::endl;
    for (size_t i = 0; i < v.vBody_Ori_des.size(); ++i)
    {
      s << indent << "  vBody_Ori_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vBody_Ori_des[i]);
    }
    s << indent << "pFoot_des[]" << std::endl;
    for (size_t i = 0; i < v.pFoot_des.size(); ++i)
    {
      s << indent << "  pFoot_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pFoot_des[i]);
    }
    s << indent << "vFoot_des[]" << std::endl;
    for (size_t i = 0; i < v.vFoot_des.size(); ++i)
    {
      s << indent << "  vFoot_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vFoot_des[i]);
    }
    s << indent << "aFoot_des[]" << std::endl;
    for (size_t i = 0; i < v.aFoot_des.size(); ++i)
    {
      s << indent << "  aFoot_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.aFoot_des[i]);
    }
    s << indent << "Fr_des[]" << std::endl;
    for (size_t i = 0; i < v.Fr_des.size(); ++i)
    {
      s << indent << "  Fr_des[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Fr_des[i]);
    }
    s << indent << "contact_state[]" << std::endl;
    for (size_t i = 0; i < v.contact_state.size(); ++i)
    {
      s << indent << "  contact_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.contact_state[i]);
    }
    s << indent << "timestamp_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_us);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_WBC_PARAMS_LCMT_H
