// Generated by gencpp from file lcm_to_ros/heightmap_image_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_HEIGHTMAP_IMAGE_LCMT_H
#define LCM_TO_ROS_MESSAGE_HEIGHTMAP_IMAGE_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct heightmap_image_lcmt_
{
  typedef heightmap_image_lcmt_<ContainerAllocator> Type;

  heightmap_image_lcmt_()
    : hmap()
    , length(0)
    , width(0)
    , x_resolution(0.0)
    , y_resolution(0.0)
    , x_shift(0.0)
    , y_shift(0.0)
    , timestamp_us(0)
    , id(0)  {
      hmap.assign(0.0);
  }
  heightmap_image_lcmt_(const ContainerAllocator& _alloc)
    : hmap()
    , length(0)
    , width(0)
    , x_resolution(0.0)
    , y_resolution(0.0)
    , x_shift(0.0)
    , y_shift(0.0)
    , timestamp_us(0)
    , id(0)  {
  (void)_alloc;
      hmap.assign(0.0);
  }



   typedef boost::array<float, 1080>  _hmap_type;
  _hmap_type hmap;

   typedef int8_t _length_type;
  _length_type length;

   typedef int8_t _width_type;
  _width_type width;

   typedef float _x_resolution_type;
  _x_resolution_type x_resolution;

   typedef float _y_resolution_type;
  _y_resolution_type y_resolution;

   typedef float _x_shift_type;
  _x_shift_type x_shift;

   typedef float _y_shift_type;
  _y_shift_type y_shift;

   typedef int64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;

   typedef int64_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct heightmap_image_lcmt_

typedef ::lcm_to_ros::heightmap_image_lcmt_<std::allocator<void> > heightmap_image_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::heightmap_image_lcmt > heightmap_image_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::heightmap_image_lcmt const> heightmap_image_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator2> & rhs)
{
  return lhs.hmap == rhs.hmap &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.x_resolution == rhs.x_resolution &&
    lhs.y_resolution == rhs.y_resolution &&
    lhs.x_shift == rhs.x_shift &&
    lhs.y_shift == rhs.y_shift &&
    lhs.timestamp_us == rhs.timestamp_us &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15919913ca1f35400d1d00e89f96178a";
  }

  static const char* value(const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15919913ca1f3540ULL;
  static const uint64_t static_value2 = 0x0d1d00e89f96178aULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/heightmap_image_lcmt";
  }

  static const char* value(const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:01 2021\n"
"#\n"
"#######################################################################\n"
"float32[1080]       hmap\n"
"int8                length\n"
"int8                width\n"
"float32             x_resolution\n"
"float32             y_resolution\n"
"float32             x_shift\n"
"float32             y_shift\n"
"int64               timestamp_us\n"
"int64               id\n"
;
  }

  static const char* value(const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hmap);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.x_resolution);
      stream.next(m.y_resolution);
      stream.next(m.x_shift);
      stream.next(m.y_shift);
      stream.next(m.timestamp_us);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct heightmap_image_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::heightmap_image_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "hmap[]" << std::endl;
    for (size_t i = 0; i < v.hmap.size(); ++i)
    {
      s << indent << "  hmap[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hmap[i]);
    }
    s << indent << "length: ";
    Printer<int8_t>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<int8_t>::stream(s, indent + "  ", v.width);
    s << indent << "x_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.x_resolution);
    s << indent << "y_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.y_resolution);
    s << indent << "x_shift: ";
    Printer<float>::stream(s, indent + "  ", v.x_shift);
    s << indent << "y_shift: ";
    Printer<float>::stream(s, indent + "  ", v.y_shift);
    s << indent << "timestamp_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_us);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_HEIGHTMAP_IMAGE_LCMT_H
