// Generated by gencpp from file lcm_to_ros/wbc_test_data_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_WBC_TEST_DATA_LCMT_H
#define LCM_TO_ROS_MESSAGE_WBC_TEST_DATA_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct wbc_test_data_lcmt_
{
  typedef wbc_test_data_lcmt_<ContainerAllocator> Type;

  wbc_test_data_lcmt_()
    : contact_est()
    , Fr_des()
    , Fr()
    , body_ori_cmd()
    , body_pos_cmd()
    , body_vel_cmd()
    , body_ang_vel_cmd()
    , body_rpy_cmd()
    , body_pos()
    , body_vel()
    , body_ori()
    , body_ang_vel()
    , body_rpy()
    , foot_pos_cmd()
    , foot_vel_cmd()
    , foot_acc_cmd()
    , foot_acc_numeric()
    , foot_pos()
    , foot_vel()
    , foot_local_pos()
    , foot_local_vel()
    , jpos_cmd()
    , jvel_cmd()
    , jacc_cmd()
    , jpos()
    , jvel()
    , vision_loc()
    , timestamp_us(0)  {
      contact_est.assign(0);

      Fr_des.assign(0.0);

      Fr.assign(0.0);

      body_ori_cmd.assign(0.0);

      body_pos_cmd.assign(0.0);

      body_vel_cmd.assign(0.0);

      body_ang_vel_cmd.assign(0.0);

      body_rpy_cmd.assign(0.0);

      body_pos.assign(0.0);

      body_vel.assign(0.0);

      body_ori.assign(0.0);

      body_ang_vel.assign(0.0);

      body_rpy.assign(0.0);

      foot_pos_cmd.assign(0.0);

      foot_vel_cmd.assign(0.0);

      foot_acc_cmd.assign(0.0);

      foot_acc_numeric.assign(0.0);

      foot_pos.assign(0.0);

      foot_vel.assign(0.0);

      foot_local_pos.assign(0.0);

      foot_local_vel.assign(0.0);

      jpos_cmd.assign(0.0);

      jvel_cmd.assign(0.0);

      jacc_cmd.assign(0.0);

      jpos.assign(0.0);

      jvel.assign(0.0);

      vision_loc.assign(0.0);
  }
  wbc_test_data_lcmt_(const ContainerAllocator& _alloc)
    : contact_est()
    , Fr_des()
    , Fr()
    , body_ori_cmd()
    , body_pos_cmd()
    , body_vel_cmd()
    , body_ang_vel_cmd()
    , body_rpy_cmd()
    , body_pos()
    , body_vel()
    , body_ori()
    , body_ang_vel()
    , body_rpy()
    , foot_pos_cmd()
    , foot_vel_cmd()
    , foot_acc_cmd()
    , foot_acc_numeric()
    , foot_pos()
    , foot_vel()
    , foot_local_pos()
    , foot_local_vel()
    , jpos_cmd()
    , jvel_cmd()
    , jacc_cmd()
    , jpos()
    , jvel()
    , vision_loc()
    , timestamp_us(0)  {
  (void)_alloc;
      contact_est.assign(0);

      Fr_des.assign(0.0);

      Fr.assign(0.0);

      body_ori_cmd.assign(0.0);

      body_pos_cmd.assign(0.0);

      body_vel_cmd.assign(0.0);

      body_ang_vel_cmd.assign(0.0);

      body_rpy_cmd.assign(0.0);

      body_pos.assign(0.0);

      body_vel.assign(0.0);

      body_ori.assign(0.0);

      body_ang_vel.assign(0.0);

      body_rpy.assign(0.0);

      foot_pos_cmd.assign(0.0);

      foot_vel_cmd.assign(0.0);

      foot_acc_cmd.assign(0.0);

      foot_acc_numeric.assign(0.0);

      foot_pos.assign(0.0);

      foot_vel.assign(0.0);

      foot_local_pos.assign(0.0);

      foot_local_vel.assign(0.0);

      jpos_cmd.assign(0.0);

      jvel_cmd.assign(0.0);

      jacc_cmd.assign(0.0);

      jpos.assign(0.0);

      jvel.assign(0.0);

      vision_loc.assign(0.0);
  }



   typedef boost::array<int32_t, 4>  _contact_est_type;
  _contact_est_type contact_est;

   typedef boost::array<float, 12>  _Fr_des_type;
  _Fr_des_type Fr_des;

   typedef boost::array<float, 12>  _Fr_type;
  _Fr_type Fr;

   typedef boost::array<float, 4>  _body_ori_cmd_type;
  _body_ori_cmd_type body_ori_cmd;

   typedef boost::array<float, 3>  _body_pos_cmd_type;
  _body_pos_cmd_type body_pos_cmd;

   typedef boost::array<float, 3>  _body_vel_cmd_type;
  _body_vel_cmd_type body_vel_cmd;

   typedef boost::array<float, 3>  _body_ang_vel_cmd_type;
  _body_ang_vel_cmd_type body_ang_vel_cmd;

   typedef boost::array<float, 3>  _body_rpy_cmd_type;
  _body_rpy_cmd_type body_rpy_cmd;

   typedef boost::array<float, 3>  _body_pos_type;
  _body_pos_type body_pos;

   typedef boost::array<float, 3>  _body_vel_type;
  _body_vel_type body_vel;

   typedef boost::array<float, 4>  _body_ori_type;
  _body_ori_type body_ori;

   typedef boost::array<float, 3>  _body_ang_vel_type;
  _body_ang_vel_type body_ang_vel;

   typedef boost::array<float, 3>  _body_rpy_type;
  _body_rpy_type body_rpy;

   typedef boost::array<float, 12>  _foot_pos_cmd_type;
  _foot_pos_cmd_type foot_pos_cmd;

   typedef boost::array<float, 12>  _foot_vel_cmd_type;
  _foot_vel_cmd_type foot_vel_cmd;

   typedef boost::array<float, 12>  _foot_acc_cmd_type;
  _foot_acc_cmd_type foot_acc_cmd;

   typedef boost::array<float, 12>  _foot_acc_numeric_type;
  _foot_acc_numeric_type foot_acc_numeric;

   typedef boost::array<float, 12>  _foot_pos_type;
  _foot_pos_type foot_pos;

   typedef boost::array<float, 12>  _foot_vel_type;
  _foot_vel_type foot_vel;

   typedef boost::array<float, 12>  _foot_local_pos_type;
  _foot_local_pos_type foot_local_pos;

   typedef boost::array<float, 12>  _foot_local_vel_type;
  _foot_local_vel_type foot_local_vel;

   typedef boost::array<float, 16>  _jpos_cmd_type;
  _jpos_cmd_type jpos_cmd;

   typedef boost::array<float, 16>  _jvel_cmd_type;
  _jvel_cmd_type jvel_cmd;

   typedef boost::array<float, 16>  _jacc_cmd_type;
  _jacc_cmd_type jacc_cmd;

   typedef boost::array<float, 16>  _jpos_type;
  _jpos_type jpos;

   typedef boost::array<float, 16>  _jvel_type;
  _jvel_type jvel;

   typedef boost::array<float, 3>  _vision_loc_type;
  _vision_loc_type vision_loc;

   typedef int64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;





  typedef boost::shared_ptr< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct wbc_test_data_lcmt_

typedef ::lcm_to_ros::wbc_test_data_lcmt_<std::allocator<void> > wbc_test_data_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::wbc_test_data_lcmt > wbc_test_data_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::wbc_test_data_lcmt const> wbc_test_data_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator2> & rhs)
{
  return lhs.contact_est == rhs.contact_est &&
    lhs.Fr_des == rhs.Fr_des &&
    lhs.Fr == rhs.Fr &&
    lhs.body_ori_cmd == rhs.body_ori_cmd &&
    lhs.body_pos_cmd == rhs.body_pos_cmd &&
    lhs.body_vel_cmd == rhs.body_vel_cmd &&
    lhs.body_ang_vel_cmd == rhs.body_ang_vel_cmd &&
    lhs.body_rpy_cmd == rhs.body_rpy_cmd &&
    lhs.body_pos == rhs.body_pos &&
    lhs.body_vel == rhs.body_vel &&
    lhs.body_ori == rhs.body_ori &&
    lhs.body_ang_vel == rhs.body_ang_vel &&
    lhs.body_rpy == rhs.body_rpy &&
    lhs.foot_pos_cmd == rhs.foot_pos_cmd &&
    lhs.foot_vel_cmd == rhs.foot_vel_cmd &&
    lhs.foot_acc_cmd == rhs.foot_acc_cmd &&
    lhs.foot_acc_numeric == rhs.foot_acc_numeric &&
    lhs.foot_pos == rhs.foot_pos &&
    lhs.foot_vel == rhs.foot_vel &&
    lhs.foot_local_pos == rhs.foot_local_pos &&
    lhs.foot_local_vel == rhs.foot_local_vel &&
    lhs.jpos_cmd == rhs.jpos_cmd &&
    lhs.jvel_cmd == rhs.jvel_cmd &&
    lhs.jacc_cmd == rhs.jacc_cmd &&
    lhs.jpos == rhs.jpos &&
    lhs.jvel == rhs.jvel &&
    lhs.vision_loc == rhs.vision_loc &&
    lhs.timestamp_us == rhs.timestamp_us;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ec9ea25f44f35a3fb8309b3fd66e8e3";
  }

  static const char* value(const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ec9ea25f44f35a3ULL;
  static const uint64_t static_value2 = 0xfb8309b3fd66e8e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/wbc_test_data_lcmt";
  }

  static const char* value(const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:02 2021\n"
"#\n"
"#######################################################################\n"
"int32[4]            contact_est\n"
"                    \n"
"float32[12]         Fr_des\n"
"float32[12]         Fr\n"
"                    \n"
"float32[4]          body_ori_cmd\n"
"float32[3]          body_pos_cmd\n"
"float32[3]          body_vel_cmd\n"
"float32[3]          body_ang_vel_cmd\n"
"float32[3]          body_rpy_cmd\n"
"                    \n"
"float32[3]          body_pos\n"
"float32[3]          body_vel\n"
"                    \n"
"float32[4]          body_ori\n"
"float32[3]          body_ang_vel\n"
"float32[3]          body_rpy\n"
"                    \n"
"float32[12]         foot_pos_cmd\n"
"float32[12]         foot_vel_cmd\n"
"float32[12]         foot_acc_cmd\n"
"float32[12]         foot_acc_numeric\n"
"                    \n"
"float32[12]         foot_pos\n"
"float32[12]         foot_vel\n"
"                    \n"
"float32[12]         foot_local_pos\n"
"float32[12]         foot_local_vel\n"
"                    \n"
"float32[16]         jpos_cmd\n"
"float32[16]         jvel_cmd\n"
"float32[16]         jacc_cmd\n"
"                    \n"
"float32[16]         jpos\n"
"float32[16]         jvel\n"
"                    \n"
"float32[3]          vision_loc\n"
"                    \n"
"int64               timestamp_us\n"
;
  }

  static const char* value(const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.contact_est);
      stream.next(m.Fr_des);
      stream.next(m.Fr);
      stream.next(m.body_ori_cmd);
      stream.next(m.body_pos_cmd);
      stream.next(m.body_vel_cmd);
      stream.next(m.body_ang_vel_cmd);
      stream.next(m.body_rpy_cmd);
      stream.next(m.body_pos);
      stream.next(m.body_vel);
      stream.next(m.body_ori);
      stream.next(m.body_ang_vel);
      stream.next(m.body_rpy);
      stream.next(m.foot_pos_cmd);
      stream.next(m.foot_vel_cmd);
      stream.next(m.foot_acc_cmd);
      stream.next(m.foot_acc_numeric);
      stream.next(m.foot_pos);
      stream.next(m.foot_vel);
      stream.next(m.foot_local_pos);
      stream.next(m.foot_local_vel);
      stream.next(m.jpos_cmd);
      stream.next(m.jvel_cmd);
      stream.next(m.jacc_cmd);
      stream.next(m.jpos);
      stream.next(m.jvel);
      stream.next(m.vision_loc);
      stream.next(m.timestamp_us);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wbc_test_data_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::wbc_test_data_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "contact_est[]" << std::endl;
    for (size_t i = 0; i < v.contact_est.size(); ++i)
    {
      s << indent << "  contact_est[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.contact_est[i]);
    }
    s << indent << "Fr_des[]" << std::endl;
    for (size_t i = 0; i < v.Fr_des.size(); ++i)
    {
      s << indent << "  Fr_des[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Fr_des[i]);
    }
    s << indent << "Fr[]" << std::endl;
    for (size_t i = 0; i < v.Fr.size(); ++i)
    {
      s << indent << "  Fr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Fr[i]);
    }
    s << indent << "body_ori_cmd[]" << std::endl;
    for (size_t i = 0; i < v.body_ori_cmd.size(); ++i)
    {
      s << indent << "  body_ori_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_ori_cmd[i]);
    }
    s << indent << "body_pos_cmd[]" << std::endl;
    for (size_t i = 0; i < v.body_pos_cmd.size(); ++i)
    {
      s << indent << "  body_pos_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_pos_cmd[i]);
    }
    s << indent << "body_vel_cmd[]" << std::endl;
    for (size_t i = 0; i < v.body_vel_cmd.size(); ++i)
    {
      s << indent << "  body_vel_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_vel_cmd[i]);
    }
    s << indent << "body_ang_vel_cmd[]" << std::endl;
    for (size_t i = 0; i < v.body_ang_vel_cmd.size(); ++i)
    {
      s << indent << "  body_ang_vel_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_ang_vel_cmd[i]);
    }
    s << indent << "body_rpy_cmd[]" << std::endl;
    for (size_t i = 0; i < v.body_rpy_cmd.size(); ++i)
    {
      s << indent << "  body_rpy_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_rpy_cmd[i]);
    }
    s << indent << "body_pos[]" << std::endl;
    for (size_t i = 0; i < v.body_pos.size(); ++i)
    {
      s << indent << "  body_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_pos[i]);
    }
    s << indent << "body_vel[]" << std::endl;
    for (size_t i = 0; i < v.body_vel.size(); ++i)
    {
      s << indent << "  body_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_vel[i]);
    }
    s << indent << "body_ori[]" << std::endl;
    for (size_t i = 0; i < v.body_ori.size(); ++i)
    {
      s << indent << "  body_ori[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_ori[i]);
    }
    s << indent << "body_ang_vel[]" << std::endl;
    for (size_t i = 0; i < v.body_ang_vel.size(); ++i)
    {
      s << indent << "  body_ang_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_ang_vel[i]);
    }
    s << indent << "body_rpy[]" << std::endl;
    for (size_t i = 0; i < v.body_rpy.size(); ++i)
    {
      s << indent << "  body_rpy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_rpy[i]);
    }
    s << indent << "foot_pos_cmd[]" << std::endl;
    for (size_t i = 0; i < v.foot_pos_cmd.size(); ++i)
    {
      s << indent << "  foot_pos_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_pos_cmd[i]);
    }
    s << indent << "foot_vel_cmd[]" << std::endl;
    for (size_t i = 0; i < v.foot_vel_cmd.size(); ++i)
    {
      s << indent << "  foot_vel_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_vel_cmd[i]);
    }
    s << indent << "foot_acc_cmd[]" << std::endl;
    for (size_t i = 0; i < v.foot_acc_cmd.size(); ++i)
    {
      s << indent << "  foot_acc_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_acc_cmd[i]);
    }
    s << indent << "foot_acc_numeric[]" << std::endl;
    for (size_t i = 0; i < v.foot_acc_numeric.size(); ++i)
    {
      s << indent << "  foot_acc_numeric[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_acc_numeric[i]);
    }
    s << indent << "foot_pos[]" << std::endl;
    for (size_t i = 0; i < v.foot_pos.size(); ++i)
    {
      s << indent << "  foot_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_pos[i]);
    }
    s << indent << "foot_vel[]" << std::endl;
    for (size_t i = 0; i < v.foot_vel.size(); ++i)
    {
      s << indent << "  foot_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_vel[i]);
    }
    s << indent << "foot_local_pos[]" << std::endl;
    for (size_t i = 0; i < v.foot_local_pos.size(); ++i)
    {
      s << indent << "  foot_local_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_local_pos[i]);
    }
    s << indent << "foot_local_vel[]" << std::endl;
    for (size_t i = 0; i < v.foot_local_vel.size(); ++i)
    {
      s << indent << "  foot_local_vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_local_vel[i]);
    }
    s << indent << "jpos_cmd[]" << std::endl;
    for (size_t i = 0; i < v.jpos_cmd.size(); ++i)
    {
      s << indent << "  jpos_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jpos_cmd[i]);
    }
    s << indent << "jvel_cmd[]" << std::endl;
    for (size_t i = 0; i < v.jvel_cmd.size(); ++i)
    {
      s << indent << "  jvel_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jvel_cmd[i]);
    }
    s << indent << "jacc_cmd[]" << std::endl;
    for (size_t i = 0; i < v.jacc_cmd.size(); ++i)
    {
      s << indent << "  jacc_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jacc_cmd[i]);
    }
    s << indent << "jpos[]" << std::endl;
    for (size_t i = 0; i < v.jpos.size(); ++i)
    {
      s << indent << "  jpos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jpos[i]);
    }
    s << indent << "jvel[]" << std::endl;
    for (size_t i = 0; i < v.jvel.size(); ++i)
    {
      s << indent << "  jvel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.jvel[i]);
    }
    s << indent << "vision_loc[]" << std::endl;
    for (size_t i = 0; i < v.vision_loc.size(); ++i)
    {
      s << indent << "  vision_loc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vision_loc[i]);
    }
    s << indent << "timestamp_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_us);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_WBC_TEST_DATA_LCMT_H
