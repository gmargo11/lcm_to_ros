// Generated by gencpp from file lcm_to_ros/state_estimator_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_STATE_ESTIMATOR_LCMT_H
#define LCM_TO_ROS_MESSAGE_STATE_ESTIMATOR_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct state_estimator_lcmt_
{
  typedef state_estimator_lcmt_<ContainerAllocator> Type;

  state_estimator_lcmt_()
    : p()
    , vWorld()
    , vBody()
    , rpy()
    , omegaBody()
    , omegaWorld()
    , quat()
    , contact_estimate()
    , aBody()
    , aWorld()
    , timestamp_us(0)
    , id(0)  {
      p.assign(0.0);

      vWorld.assign(0.0);

      vBody.assign(0.0);

      rpy.assign(0.0);

      omegaBody.assign(0.0);

      omegaWorld.assign(0.0);

      quat.assign(0.0);

      contact_estimate.assign(0.0);

      aBody.assign(0.0);

      aWorld.assign(0.0);
  }
  state_estimator_lcmt_(const ContainerAllocator& _alloc)
    : p()
    , vWorld()
    , vBody()
    , rpy()
    , omegaBody()
    , omegaWorld()
    , quat()
    , contact_estimate()
    , aBody()
    , aWorld()
    , timestamp_us(0)
    , id(0)  {
  (void)_alloc;
      p.assign(0.0);

      vWorld.assign(0.0);

      vBody.assign(0.0);

      rpy.assign(0.0);

      omegaBody.assign(0.0);

      omegaWorld.assign(0.0);

      quat.assign(0.0);

      contact_estimate.assign(0.0);

      aBody.assign(0.0);

      aWorld.assign(0.0);
  }



   typedef boost::array<float, 3>  _p_type;
  _p_type p;

   typedef boost::array<float, 3>  _vWorld_type;
  _vWorld_type vWorld;

   typedef boost::array<float, 3>  _vBody_type;
  _vBody_type vBody;

   typedef boost::array<float, 3>  _rpy_type;
  _rpy_type rpy;

   typedef boost::array<float, 3>  _omegaBody_type;
  _omegaBody_type omegaBody;

   typedef boost::array<float, 3>  _omegaWorld_type;
  _omegaWorld_type omegaWorld;

   typedef boost::array<float, 4>  _quat_type;
  _quat_type quat;

   typedef boost::array<float, 4>  _contact_estimate_type;
  _contact_estimate_type contact_estimate;

   typedef boost::array<float, 3>  _aBody_type;
  _aBody_type aBody;

   typedef boost::array<float, 3>  _aWorld_type;
  _aWorld_type aWorld;

   typedef int64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;

   typedef int64_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct state_estimator_lcmt_

typedef ::lcm_to_ros::state_estimator_lcmt_<std::allocator<void> > state_estimator_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::state_estimator_lcmt > state_estimator_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::state_estimator_lcmt const> state_estimator_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator2> & rhs)
{
  return lhs.p == rhs.p &&
    lhs.vWorld == rhs.vWorld &&
    lhs.vBody == rhs.vBody &&
    lhs.rpy == rhs.rpy &&
    lhs.omegaBody == rhs.omegaBody &&
    lhs.omegaWorld == rhs.omegaWorld &&
    lhs.quat == rhs.quat &&
    lhs.contact_estimate == rhs.contact_estimate &&
    lhs.aBody == rhs.aBody &&
    lhs.aWorld == rhs.aWorld &&
    lhs.timestamp_us == rhs.timestamp_us &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator1> & lhs, const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13ff81984b6cb17132338b363d3810b1";
  }

  static const char* value(const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13ff81984b6cb171ULL;
  static const uint64_t static_value2 = 0x32338b363d3810b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/state_estimator_lcmt";
  }

  static const char* value(const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:01 2021\n"
"#\n"
"#######################################################################\n"
"float32[3]          p\n"
"float32[3]          vWorld\n"
"float32[3]          vBody\n"
"float32[3]          rpy\n"
"float32[3]          omegaBody\n"
"float32[3]          omegaWorld\n"
"float32[4]          quat\n"
"float32[4]          contact_estimate\n"
"float32[3]          aBody\n"
"float32[3]          aWorld\n"
"int64               timestamp_us\n"
"int64               id\n"
;
  }

  static const char* value(const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
      stream.next(m.vWorld);
      stream.next(m.vBody);
      stream.next(m.rpy);
      stream.next(m.omegaBody);
      stream.next(m.omegaWorld);
      stream.next(m.quat);
      stream.next(m.contact_estimate);
      stream.next(m.aBody);
      stream.next(m.aWorld);
      stream.next(m.timestamp_us);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_estimator_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::state_estimator_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "p[]" << std::endl;
    for (size_t i = 0; i < v.p.size(); ++i)
    {
      s << indent << "  p[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p[i]);
    }
    s << indent << "vWorld[]" << std::endl;
    for (size_t i = 0; i < v.vWorld.size(); ++i)
    {
      s << indent << "  vWorld[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vWorld[i]);
    }
    s << indent << "vBody[]" << std::endl;
    for (size_t i = 0; i < v.vBody.size(); ++i)
    {
      s << indent << "  vBody[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vBody[i]);
    }
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "omegaBody[]" << std::endl;
    for (size_t i = 0; i < v.omegaBody.size(); ++i)
    {
      s << indent << "  omegaBody[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.omegaBody[i]);
    }
    s << indent << "omegaWorld[]" << std::endl;
    for (size_t i = 0; i < v.omegaWorld.size(); ++i)
    {
      s << indent << "  omegaWorld[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.omegaWorld[i]);
    }
    s << indent << "quat[]" << std::endl;
    for (size_t i = 0; i < v.quat.size(); ++i)
    {
      s << indent << "  quat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quat[i]);
    }
    s << indent << "contact_estimate[]" << std::endl;
    for (size_t i = 0; i < v.contact_estimate.size(); ++i)
    {
      s << indent << "  contact_estimate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.contact_estimate[i]);
    }
    s << indent << "aBody[]" << std::endl;
    for (size_t i = 0; i < v.aBody.size(); ++i)
    {
      s << indent << "  aBody[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aBody[i]);
    }
    s << indent << "aWorld[]" << std::endl;
    for (size_t i = 0; i < v.aWorld.size(); ++i)
    {
      s << indent << "  aWorld[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.aWorld[i]);
    }
    s << indent << "timestamp_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp_us);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_STATE_ESTIMATOR_LCMT_H
