// Generated by gencpp from file lcm_to_ros/body_pose_type.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_BODY_POSE_TYPE_H
#define LCM_TO_ROS_MESSAGE_BODY_POSE_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct body_pose_type_
{
  typedef body_pose_type_<ContainerAllocator> Type;

  body_pose_type_()
    : body_pos()
    , body_ori_quat()  {
      body_pos.assign(0.0);

      body_ori_quat.assign(0.0);
  }
  body_pose_type_(const ContainerAllocator& _alloc)
    : body_pos()
    , body_ori_quat()  {
  (void)_alloc;
      body_pos.assign(0.0);

      body_ori_quat.assign(0.0);
  }



   typedef boost::array<float, 3>  _body_pos_type;
  _body_pos_type body_pos;

   typedef boost::array<float, 4>  _body_ori_quat_type;
  _body_ori_quat_type body_ori_quat;





  typedef boost::shared_ptr< ::lcm_to_ros::body_pose_type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::body_pose_type_<ContainerAllocator> const> ConstPtr;

}; // struct body_pose_type_

typedef ::lcm_to_ros::body_pose_type_<std::allocator<void> > body_pose_type;

typedef boost::shared_ptr< ::lcm_to_ros::body_pose_type > body_pose_typePtr;
typedef boost::shared_ptr< ::lcm_to_ros::body_pose_type const> body_pose_typeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::body_pose_type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lcm_to_ros::body_pose_type_<ContainerAllocator1> & lhs, const ::lcm_to_ros::body_pose_type_<ContainerAllocator2> & rhs)
{
  return lhs.body_pos == rhs.body_pos &&
    lhs.body_ori_quat == rhs.body_ori_quat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lcm_to_ros::body_pose_type_<ContainerAllocator1> & lhs, const ::lcm_to_ros::body_pose_type_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::body_pose_type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::body_pose_type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::body_pose_type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e23d96a454b73e0e74cf8eadd8009847";
  }

  static const char* value(const ::lcm_to_ros::body_pose_type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe23d96a454b73e0eULL;
  static const uint64_t static_value2 = 0x74cf8eadd8009847ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/body_pose_type";
  }

  static const char* value(const ::lcm_to_ros::body_pose_type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n"
"# This message was automatically generated by the lcm_to_ros package\n"
"# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n"
"#######################################################################\n"
"#\n"
"# Source message:    .msg\n"
"# Creation:          Fri Apr 16 18:27:01 2021\n"
"#\n"
"#######################################################################\n"
"float32[3]          body_pos\n"
"float32[4]          body_ori_quat\n"
;
  }

  static const char* value(const ::lcm_to_ros::body_pose_type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.body_pos);
      stream.next(m.body_ori_quat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct body_pose_type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::body_pose_type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::body_pose_type_<ContainerAllocator>& v)
  {
    s << indent << "body_pos[]" << std::endl;
    for (size_t i = 0; i < v.body_pos.size(); ++i)
    {
      s << indent << "  body_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_pos[i]);
    }
    s << indent << "body_ori_quat[]" << std::endl;
    for (size_t i = 0; i < v.body_ori_quat.size(); ++i)
    {
      s << indent << "  body_ori_quat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_ori_quat[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_BODY_POSE_TYPE_H
