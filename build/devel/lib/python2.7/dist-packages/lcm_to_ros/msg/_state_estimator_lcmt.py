# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/state_estimator_lcmt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class state_estimator_lcmt(genpy.Message):
  _md5sum = "13ff81984b6cb17132338b363d3810b1"
  _type = "lcm_to_ros/state_estimator_lcmt"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          Fri Apr 16 18:27:01 2021
#
#######################################################################
float32[3]          p
float32[3]          vWorld
float32[3]          vBody
float32[3]          rpy
float32[3]          omegaBody
float32[3]          omegaWorld
float32[4]          quat
float32[4]          contact_estimate
float32[3]          aBody
float32[3]          aWorld
int64               timestamp_us
int64               id
"""
  __slots__ = ['p','vWorld','vBody','rpy','omegaBody','omegaWorld','quat','contact_estimate','aBody','aWorld','timestamp_us','id']
  _slot_types = ['float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[4]','float32[4]','float32[3]','float32[3]','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       p,vWorld,vBody,rpy,omegaBody,omegaWorld,quat,contact_estimate,aBody,aWorld,timestamp_us,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(state_estimator_lcmt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.p is None:
        self.p = [0.] * 3
      if self.vWorld is None:
        self.vWorld = [0.] * 3
      if self.vBody is None:
        self.vBody = [0.] * 3
      if self.rpy is None:
        self.rpy = [0.] * 3
      if self.omegaBody is None:
        self.omegaBody = [0.] * 3
      if self.omegaWorld is None:
        self.omegaWorld = [0.] * 3
      if self.quat is None:
        self.quat = [0.] * 4
      if self.contact_estimate is None:
        self.contact_estimate = [0.] * 4
      if self.aBody is None:
        self.aBody = [0.] * 3
      if self.aWorld is None:
        self.aWorld = [0.] * 3
      if self.timestamp_us is None:
        self.timestamp_us = 0
      if self.id is None:
        self.id = 0
    else:
      self.p = [0.] * 3
      self.vWorld = [0.] * 3
      self.vBody = [0.] * 3
      self.rpy = [0.] * 3
      self.omegaBody = [0.] * 3
      self.omegaWorld = [0.] * 3
      self.quat = [0.] * 4
      self.contact_estimate = [0.] * 4
      self.aBody = [0.] * 3
      self.aWorld = [0.] * 3
      self.timestamp_us = 0
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3f().pack(*self.p))
      buff.write(_get_struct_3f().pack(*self.vWorld))
      buff.write(_get_struct_3f().pack(*self.vBody))
      buff.write(_get_struct_3f().pack(*self.rpy))
      buff.write(_get_struct_3f().pack(*self.omegaBody))
      buff.write(_get_struct_3f().pack(*self.omegaWorld))
      buff.write(_get_struct_4f().pack(*self.quat))
      buff.write(_get_struct_4f().pack(*self.contact_estimate))
      buff.write(_get_struct_3f().pack(*self.aBody))
      buff.write(_get_struct_3f().pack(*self.aWorld))
      _x = self
      buff.write(_get_struct_2q().pack(_x.timestamp_us, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.p = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.vWorld = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.vBody = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.rpy = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.omegaBody = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.omegaWorld = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.quat = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.contact_estimate = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.aBody = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.aWorld = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.timestamp_us, _x.id,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.p.tostring())
      buff.write(self.vWorld.tostring())
      buff.write(self.vBody.tostring())
      buff.write(self.rpy.tostring())
      buff.write(self.omegaBody.tostring())
      buff.write(self.omegaWorld.tostring())
      buff.write(self.quat.tostring())
      buff.write(self.contact_estimate.tostring())
      buff.write(self.aBody.tostring())
      buff.write(self.aWorld.tostring())
      _x = self
      buff.write(_get_struct_2q().pack(_x.timestamp_us, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.p = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.vWorld = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.vBody = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.rpy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.omegaBody = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.omegaWorld = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.contact_estimate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.aBody = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.aWorld = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 16
      (_x.timestamp_us, _x.id,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
