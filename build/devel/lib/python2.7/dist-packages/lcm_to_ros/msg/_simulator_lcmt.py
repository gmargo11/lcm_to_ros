# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/simulator_lcmt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class simulator_lcmt(genpy.Message):
  _md5sum = "74ad3ebb78b26f542dbc8fc9b449935e"
  _type = "lcm_to_ros/simulator_lcmt"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          Fri Apr 16 18:27:01 2021
#
#######################################################################
float64[3]          vb
float64[3]          rpy
                    
int64               timesteps
float64             time
float64[4]          quat
float64[3]          R
float64[3]          omegab
float64[3]          omega
float64[3]          p
float64[3]          v
float64[3]          vbd
float64[4]          q
float64[4]          qd
float64[4]          qdd
float64[4]          tau
float64[4]          f_foot
float64[4]          p_foot
"""
  __slots__ = ['vb','rpy','timesteps','time','quat','R','omegab','omega','p','v','vbd','q','qd','qdd','tau','f_foot','p_foot']
  _slot_types = ['float64[3]','float64[3]','int64','float64','float64[4]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[4]','float64[4]','float64[4]','float64[4]','float64[4]','float64[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vb,rpy,timesteps,time,quat,R,omegab,omega,p,v,vbd,q,qd,qdd,tau,f_foot,p_foot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(simulator_lcmt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vb is None:
        self.vb = [0.] * 3
      if self.rpy is None:
        self.rpy = [0.] * 3
      if self.timesteps is None:
        self.timesteps = 0
      if self.time is None:
        self.time = 0.
      if self.quat is None:
        self.quat = [0.] * 4
      if self.R is None:
        self.R = [0.] * 3
      if self.omegab is None:
        self.omegab = [0.] * 3
      if self.omega is None:
        self.omega = [0.] * 3
      if self.p is None:
        self.p = [0.] * 3
      if self.v is None:
        self.v = [0.] * 3
      if self.vbd is None:
        self.vbd = [0.] * 3
      if self.q is None:
        self.q = [0.] * 4
      if self.qd is None:
        self.qd = [0.] * 4
      if self.qdd is None:
        self.qdd = [0.] * 4
      if self.tau is None:
        self.tau = [0.] * 4
      if self.f_foot is None:
        self.f_foot = [0.] * 4
      if self.p_foot is None:
        self.p_foot = [0.] * 4
    else:
      self.vb = [0.] * 3
      self.rpy = [0.] * 3
      self.timesteps = 0
      self.time = 0.
      self.quat = [0.] * 4
      self.R = [0.] * 3
      self.omegab = [0.] * 3
      self.omega = [0.] * 3
      self.p = [0.] * 3
      self.v = [0.] * 3
      self.vbd = [0.] * 3
      self.q = [0.] * 4
      self.qd = [0.] * 4
      self.qdd = [0.] * 4
      self.tau = [0.] * 4
      self.f_foot = [0.] * 4
      self.p_foot = [0.] * 4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.vb))
      buff.write(_get_struct_3d().pack(*self.rpy))
      _x = self
      buff.write(_get_struct_qd().pack(_x.timesteps, _x.time))
      buff.write(_get_struct_4d().pack(*self.quat))
      buff.write(_get_struct_3d().pack(*self.R))
      buff.write(_get_struct_3d().pack(*self.omegab))
      buff.write(_get_struct_3d().pack(*self.omega))
      buff.write(_get_struct_3d().pack(*self.p))
      buff.write(_get_struct_3d().pack(*self.v))
      buff.write(_get_struct_3d().pack(*self.vbd))
      buff.write(_get_struct_4d().pack(*self.q))
      buff.write(_get_struct_4d().pack(*self.qd))
      buff.write(_get_struct_4d().pack(*self.qdd))
      buff.write(_get_struct_4d().pack(*self.tau))
      buff.write(_get_struct_4d().pack(*self.f_foot))
      buff.write(_get_struct_4d().pack(*self.p_foot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.vb = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.rpy = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.timesteps, _x.time,) = _get_struct_qd().unpack(str[start:end])
      start = end
      end += 32
      self.quat = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.R = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.omegab = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.omega = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.p = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.v = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.vbd = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.q = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.qd = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.qdd = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.tau = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.f_foot = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 32
      self.p_foot = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.vb.tostring())
      buff.write(self.rpy.tostring())
      _x = self
      buff.write(_get_struct_qd().pack(_x.timesteps, _x.time))
      buff.write(self.quat.tostring())
      buff.write(self.R.tostring())
      buff.write(self.omegab.tostring())
      buff.write(self.omega.tostring())
      buff.write(self.p.tostring())
      buff.write(self.v.tostring())
      buff.write(self.vbd.tostring())
      buff.write(self.q.tostring())
      buff.write(self.qd.tostring())
      buff.write(self.qdd.tostring())
      buff.write(self.tau.tostring())
      buff.write(self.f_foot.tostring())
      buff.write(self.p_foot.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.vb = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.rpy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 16
      (_x.timesteps, _x.time,) = _get_struct_qd().unpack(str[start:end])
      start = end
      end += 32
      self.quat = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 24
      self.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.omegab = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.omega = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.p = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.v = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.vbd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.qd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.qdd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.tau = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.f_foot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 32
      self.p_foot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_qd = None
def _get_struct_qd():
    global _struct_qd
    if _struct_qd is None:
        _struct_qd = struct.Struct("<qd")
    return _struct_qd
