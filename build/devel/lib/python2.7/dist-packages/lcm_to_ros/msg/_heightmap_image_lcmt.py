# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/heightmap_image_lcmt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class heightmap_image_lcmt(genpy.Message):
  _md5sum = "15919913ca1f35400d1d00e89f96178a"
  _type = "lcm_to_ros/heightmap_image_lcmt"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          Fri Apr 16 18:27:01 2021
#
#######################################################################
float32[1080]       hmap
int8                length
int8                width
float32             x_resolution
float32             y_resolution
float32             x_shift
float32             y_shift
int64               timestamp_us
int64               id
"""
  __slots__ = ['hmap','length','width','x_resolution','y_resolution','x_shift','y_shift','timestamp_us','id']
  _slot_types = ['float32[1080]','int8','int8','float32','float32','float32','float32','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hmap,length,width,x_resolution,y_resolution,x_shift,y_shift,timestamp_us,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(heightmap_image_lcmt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.hmap is None:
        self.hmap = [0.] * 1080
      if self.length is None:
        self.length = 0
      if self.width is None:
        self.width = 0
      if self.x_resolution is None:
        self.x_resolution = 0.
      if self.y_resolution is None:
        self.y_resolution = 0.
      if self.x_shift is None:
        self.x_shift = 0.
      if self.y_shift is None:
        self.y_shift = 0.
      if self.timestamp_us is None:
        self.timestamp_us = 0
      if self.id is None:
        self.id = 0
    else:
      self.hmap = [0.] * 1080
      self.length = 0
      self.width = 0
      self.x_resolution = 0.
      self.y_resolution = 0.
      self.x_shift = 0.
      self.y_shift = 0.
      self.timestamp_us = 0
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_1080f().pack(*self.hmap))
      _x = self
      buff.write(_get_struct_2b4f2q().pack(_x.length, _x.width, _x.x_resolution, _x.y_resolution, _x.x_shift, _x.y_shift, _x.timestamp_us, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4320
      self.hmap = _get_struct_1080f().unpack(str[start:end])
      _x = self
      start = end
      end += 34
      (_x.length, _x.width, _x.x_resolution, _x.y_resolution, _x.x_shift, _x.y_shift, _x.timestamp_us, _x.id,) = _get_struct_2b4f2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.hmap.tostring())
      _x = self
      buff.write(_get_struct_2b4f2q().pack(_x.length, _x.width, _x.x_resolution, _x.y_resolution, _x.x_shift, _x.y_shift, _x.timestamp_us, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4320
      self.hmap = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=1080)
      _x = self
      start = end
      end += 34
      (_x.length, _x.width, _x.x_resolution, _x.y_resolution, _x.x_shift, _x.y_shift, _x.timestamp_us, _x.id,) = _get_struct_2b4f2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_1080f = None
def _get_struct_1080f():
    global _struct_1080f
    if _struct_1080f is None:
        _struct_1080f = struct.Struct("<1080f")
    return _struct_1080f
_struct_2b4f2q = None
def _get_struct_2b4f2q():
    global _struct_2b4f2q
    if _struct_2b4f2q is None:
        _struct_2b4f2q = struct.Struct("<2b4f2q")
    return _struct_2b4f2q
