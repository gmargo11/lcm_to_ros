# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/rl_obs_t.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rl_obs_t(genpy.Message):
  _md5sum = "c418a8789f33fb8b6a6f2564756168d4"
  _type = "lcm_to_ros/rl_obs_t"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          Fri Apr 16 18:27:01 2021
#
#######################################################################
float64             body_ht
float64[3]          rpy
float64[12]         q
float64[12]         qd
float64[3]          vBody
float64[3]          omegaWorld
float64[100]        height_map
int32               mpc_progress
float64[3]          robot_world_pos
int64               timestamp_us
int64               id
"""
  __slots__ = ['body_ht','rpy','q','qd','vBody','omegaWorld','height_map','mpc_progress','robot_world_pos','timestamp_us','id']
  _slot_types = ['float64','float64[3]','float64[12]','float64[12]','float64[3]','float64[3]','float64[100]','int32','float64[3]','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       body_ht,rpy,q,qd,vBody,omegaWorld,height_map,mpc_progress,robot_world_pos,timestamp_us,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rl_obs_t, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.body_ht is None:
        self.body_ht = 0.
      if self.rpy is None:
        self.rpy = [0.] * 3
      if self.q is None:
        self.q = [0.] * 12
      if self.qd is None:
        self.qd = [0.] * 12
      if self.vBody is None:
        self.vBody = [0.] * 3
      if self.omegaWorld is None:
        self.omegaWorld = [0.] * 3
      if self.height_map is None:
        self.height_map = [0.] * 100
      if self.mpc_progress is None:
        self.mpc_progress = 0
      if self.robot_world_pos is None:
        self.robot_world_pos = [0.] * 3
      if self.timestamp_us is None:
        self.timestamp_us = 0
      if self.id is None:
        self.id = 0
    else:
      self.body_ht = 0.
      self.rpy = [0.] * 3
      self.q = [0.] * 12
      self.qd = [0.] * 12
      self.vBody = [0.] * 3
      self.omegaWorld = [0.] * 3
      self.height_map = [0.] * 100
      self.mpc_progress = 0
      self.robot_world_pos = [0.] * 3
      self.timestamp_us = 0
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.body_ht
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_3d().pack(*self.rpy))
      buff.write(_get_struct_12d().pack(*self.q))
      buff.write(_get_struct_12d().pack(*self.qd))
      buff.write(_get_struct_3d().pack(*self.vBody))
      buff.write(_get_struct_3d().pack(*self.omegaWorld))
      buff.write(_get_struct_100d().pack(*self.height_map))
      _x = self.mpc_progress
      buff.write(_get_struct_i().pack(_x))
      buff.write(_get_struct_3d().pack(*self.robot_world_pos))
      _x = self
      buff.write(_get_struct_2q().pack(_x.timestamp_us, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.body_ht,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 24
      self.rpy = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 96
      self.q = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 96
      self.qd = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 24
      self.vBody = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.omegaWorld = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 800
      self.height_map = _get_struct_100d().unpack(str[start:end])
      start = end
      end += 4
      (self.mpc_progress,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 24
      self.robot_world_pos = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.timestamp_us, _x.id,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.body_ht
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.rpy.tostring())
      buff.write(self.q.tostring())
      buff.write(self.qd.tostring())
      buff.write(self.vBody.tostring())
      buff.write(self.omegaWorld.tostring())
      buff.write(self.height_map.tostring())
      _x = self.mpc_progress
      buff.write(_get_struct_i().pack(_x))
      buff.write(self.robot_world_pos.tostring())
      _x = self
      buff.write(_get_struct_2q().pack(_x.timestamp_us, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.body_ht,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 24
      self.rpy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 96
      self.q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 96
      self.qd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 24
      self.vBody = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.omegaWorld = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 800
      self.height_map = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=100)
      start = end
      end += 4
      (self.mpc_progress,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 24
      self.robot_world_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 16
      (_x.timestamp_us, _x.id,) = _get_struct_2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_100d = None
def _get_struct_100d():
    global _struct_100d
    if _struct_100d is None:
        _struct_100d = struct.Struct("<100d")
    return _struct_100d
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
