# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/quadruped_parameters_lcmt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class quadruped_parameters_lcmt(genpy.Message):
  _md5sum = "9089736b707d4801ff07441453aca4d0"
  _type = "lcm_to_ros/quadruped_parameters_lcmt"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          Fri Apr 16 18:27:01 2021
#
#######################################################################
int64               control_mode
bool                display_heightmap
bool                cheater_mode
                    
float32             key_vertical
float32             key_horizontal
float32             key_turn
float32             key_pitch
                    
float32             stick_right_vertical
float32             stick_right_horizontal
float32             stick_left_vertical
float32             stick_left_horizontal
bool                jump_trigger
                    
bool                xbox_ctrl
"""
  __slots__ = ['control_mode','display_heightmap','cheater_mode','key_vertical','key_horizontal','key_turn','key_pitch','stick_right_vertical','stick_right_horizontal','stick_left_vertical','stick_left_horizontal','jump_trigger','xbox_ctrl']
  _slot_types = ['int64','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_mode,display_heightmap,cheater_mode,key_vertical,key_horizontal,key_turn,key_pitch,stick_right_vertical,stick_right_horizontal,stick_left_vertical,stick_left_horizontal,jump_trigger,xbox_ctrl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(quadruped_parameters_lcmt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.control_mode is None:
        self.control_mode = 0
      if self.display_heightmap is None:
        self.display_heightmap = False
      if self.cheater_mode is None:
        self.cheater_mode = False
      if self.key_vertical is None:
        self.key_vertical = 0.
      if self.key_horizontal is None:
        self.key_horizontal = 0.
      if self.key_turn is None:
        self.key_turn = 0.
      if self.key_pitch is None:
        self.key_pitch = 0.
      if self.stick_right_vertical is None:
        self.stick_right_vertical = 0.
      if self.stick_right_horizontal is None:
        self.stick_right_horizontal = 0.
      if self.stick_left_vertical is None:
        self.stick_left_vertical = 0.
      if self.stick_left_horizontal is None:
        self.stick_left_horizontal = 0.
      if self.jump_trigger is None:
        self.jump_trigger = False
      if self.xbox_ctrl is None:
        self.xbox_ctrl = False
    else:
      self.control_mode = 0
      self.display_heightmap = False
      self.cheater_mode = False
      self.key_vertical = 0.
      self.key_horizontal = 0.
      self.key_turn = 0.
      self.key_pitch = 0.
      self.stick_right_vertical = 0.
      self.stick_right_horizontal = 0.
      self.stick_left_vertical = 0.
      self.stick_left_horizontal = 0.
      self.jump_trigger = False
      self.xbox_ctrl = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2B8f2B().pack(_x.control_mode, _x.display_heightmap, _x.cheater_mode, _x.key_vertical, _x.key_horizontal, _x.key_turn, _x.key_pitch, _x.stick_right_vertical, _x.stick_right_horizontal, _x.stick_left_vertical, _x.stick_left_horizontal, _x.jump_trigger, _x.xbox_ctrl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.control_mode, _x.display_heightmap, _x.cheater_mode, _x.key_vertical, _x.key_horizontal, _x.key_turn, _x.key_pitch, _x.stick_right_vertical, _x.stick_right_horizontal, _x.stick_left_vertical, _x.stick_left_horizontal, _x.jump_trigger, _x.xbox_ctrl,) = _get_struct_q2B8f2B().unpack(str[start:end])
      self.display_heightmap = bool(self.display_heightmap)
      self.cheater_mode = bool(self.cheater_mode)
      self.jump_trigger = bool(self.jump_trigger)
      self.xbox_ctrl = bool(self.xbox_ctrl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2B8f2B().pack(_x.control_mode, _x.display_heightmap, _x.cheater_mode, _x.key_vertical, _x.key_horizontal, _x.key_turn, _x.key_pitch, _x.stick_right_vertical, _x.stick_right_horizontal, _x.stick_left_vertical, _x.stick_left_horizontal, _x.jump_trigger, _x.xbox_ctrl))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.control_mode, _x.display_heightmap, _x.cheater_mode, _x.key_vertical, _x.key_horizontal, _x.key_turn, _x.key_pitch, _x.stick_right_vertical, _x.stick_right_horizontal, _x.stick_left_vertical, _x.stick_left_horizontal, _x.jump_trigger, _x.xbox_ctrl,) = _get_struct_q2B8f2B().unpack(str[start:end])
      self.display_heightmap = bool(self.display_heightmap)
      self.cheater_mode = bool(self.cheater_mode)
      self.jump_trigger = bool(self.jump_trigger)
      self.xbox_ctrl = bool(self.xbox_ctrl)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q2B8f2B = None
def _get_struct_q2B8f2B():
    global _struct_q2B8f2B
    if _struct_q2B8f2B is None:
        _struct_q2B8f2B = struct.Struct("<q2B8f2B")
    return _struct_q2B8f2B
