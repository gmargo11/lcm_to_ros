# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/wbc_test_data_t.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class wbc_test_data_t(genpy.Message):
  _md5sum = "85a0c0715764298491c1f628cbf01b14"
  _type = "lcm_to_ros/wbc_test_data_t"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          Fri Apr 16 18:27:02 2021
#
#######################################################################
int32[4]            contact_est
                    
float32[12]         Fr_des
float32[12]         Fr
                    
float32[4]          body_ori_cmd
float32[3]          body_pos_cmd
float32[3]          body_vel_cmd
float32[3]          body_ang_vel_cmd
                    
float32[3]          body_pos
float32[3]          body_vel
                    
float32[4]          body_ori
float32[3]          body_ang_vel
                    
float32[12]         foot_pos_cmd
float32[12]         foot_vel_cmd
float32[12]         foot_acc_cmd
float32[12]         foot_acc_numeric
                    
float32[12]         foot_pos
float32[12]         foot_vel
                    
float32[12]         foot_local_pos
float32[12]         foot_local_vel
                    
float32[12]         jpos_cmd
float32[12]         jvel_cmd
float32[12]         jacc_cmd
                    
float32[12]         jpos
float32[12]         jvel
                    
float32[3]          vision_loc
"""
  __slots__ = ['contact_est','Fr_des','Fr','body_ori_cmd','body_pos_cmd','body_vel_cmd','body_ang_vel_cmd','body_pos','body_vel','body_ori','body_ang_vel','foot_pos_cmd','foot_vel_cmd','foot_acc_cmd','foot_acc_numeric','foot_pos','foot_vel','foot_local_pos','foot_local_vel','jpos_cmd','jvel_cmd','jacc_cmd','jpos','jvel','vision_loc']
  _slot_types = ['int32[4]','float32[12]','float32[12]','float32[4]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[4]','float32[3]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[12]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       contact_est,Fr_des,Fr,body_ori_cmd,body_pos_cmd,body_vel_cmd,body_ang_vel_cmd,body_pos,body_vel,body_ori,body_ang_vel,foot_pos_cmd,foot_vel_cmd,foot_acc_cmd,foot_acc_numeric,foot_pos,foot_vel,foot_local_pos,foot_local_vel,jpos_cmd,jvel_cmd,jacc_cmd,jpos,jvel,vision_loc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(wbc_test_data_t, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.contact_est is None:
        self.contact_est = [0] * 4
      if self.Fr_des is None:
        self.Fr_des = [0.] * 12
      if self.Fr is None:
        self.Fr = [0.] * 12
      if self.body_ori_cmd is None:
        self.body_ori_cmd = [0.] * 4
      if self.body_pos_cmd is None:
        self.body_pos_cmd = [0.] * 3
      if self.body_vel_cmd is None:
        self.body_vel_cmd = [0.] * 3
      if self.body_ang_vel_cmd is None:
        self.body_ang_vel_cmd = [0.] * 3
      if self.body_pos is None:
        self.body_pos = [0.] * 3
      if self.body_vel is None:
        self.body_vel = [0.] * 3
      if self.body_ori is None:
        self.body_ori = [0.] * 4
      if self.body_ang_vel is None:
        self.body_ang_vel = [0.] * 3
      if self.foot_pos_cmd is None:
        self.foot_pos_cmd = [0.] * 12
      if self.foot_vel_cmd is None:
        self.foot_vel_cmd = [0.] * 12
      if self.foot_acc_cmd is None:
        self.foot_acc_cmd = [0.] * 12
      if self.foot_acc_numeric is None:
        self.foot_acc_numeric = [0.] * 12
      if self.foot_pos is None:
        self.foot_pos = [0.] * 12
      if self.foot_vel is None:
        self.foot_vel = [0.] * 12
      if self.foot_local_pos is None:
        self.foot_local_pos = [0.] * 12
      if self.foot_local_vel is None:
        self.foot_local_vel = [0.] * 12
      if self.jpos_cmd is None:
        self.jpos_cmd = [0.] * 12
      if self.jvel_cmd is None:
        self.jvel_cmd = [0.] * 12
      if self.jacc_cmd is None:
        self.jacc_cmd = [0.] * 12
      if self.jpos is None:
        self.jpos = [0.] * 12
      if self.jvel is None:
        self.jvel = [0.] * 12
      if self.vision_loc is None:
        self.vision_loc = [0.] * 3
    else:
      self.contact_est = [0] * 4
      self.Fr_des = [0.] * 12
      self.Fr = [0.] * 12
      self.body_ori_cmd = [0.] * 4
      self.body_pos_cmd = [0.] * 3
      self.body_vel_cmd = [0.] * 3
      self.body_ang_vel_cmd = [0.] * 3
      self.body_pos = [0.] * 3
      self.body_vel = [0.] * 3
      self.body_ori = [0.] * 4
      self.body_ang_vel = [0.] * 3
      self.foot_pos_cmd = [0.] * 12
      self.foot_vel_cmd = [0.] * 12
      self.foot_acc_cmd = [0.] * 12
      self.foot_acc_numeric = [0.] * 12
      self.foot_pos = [0.] * 12
      self.foot_vel = [0.] * 12
      self.foot_local_pos = [0.] * 12
      self.foot_local_vel = [0.] * 12
      self.jpos_cmd = [0.] * 12
      self.jvel_cmd = [0.] * 12
      self.jacc_cmd = [0.] * 12
      self.jpos = [0.] * 12
      self.jvel = [0.] * 12
      self.vision_loc = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4i().pack(*self.contact_est))
      buff.write(_get_struct_12f().pack(*self.Fr_des))
      buff.write(_get_struct_12f().pack(*self.Fr))
      buff.write(_get_struct_4f().pack(*self.body_ori_cmd))
      buff.write(_get_struct_3f().pack(*self.body_pos_cmd))
      buff.write(_get_struct_3f().pack(*self.body_vel_cmd))
      buff.write(_get_struct_3f().pack(*self.body_ang_vel_cmd))
      buff.write(_get_struct_3f().pack(*self.body_pos))
      buff.write(_get_struct_3f().pack(*self.body_vel))
      buff.write(_get_struct_4f().pack(*self.body_ori))
      buff.write(_get_struct_3f().pack(*self.body_ang_vel))
      buff.write(_get_struct_12f().pack(*self.foot_pos_cmd))
      buff.write(_get_struct_12f().pack(*self.foot_vel_cmd))
      buff.write(_get_struct_12f().pack(*self.foot_acc_cmd))
      buff.write(_get_struct_12f().pack(*self.foot_acc_numeric))
      buff.write(_get_struct_12f().pack(*self.foot_pos))
      buff.write(_get_struct_12f().pack(*self.foot_vel))
      buff.write(_get_struct_12f().pack(*self.foot_local_pos))
      buff.write(_get_struct_12f().pack(*self.foot_local_vel))
      buff.write(_get_struct_12f().pack(*self.jpos_cmd))
      buff.write(_get_struct_12f().pack(*self.jvel_cmd))
      buff.write(_get_struct_12f().pack(*self.jacc_cmd))
      buff.write(_get_struct_12f().pack(*self.jpos))
      buff.write(_get_struct_12f().pack(*self.jvel))
      buff.write(_get_struct_3f().pack(*self.vision_loc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.contact_est = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 48
      self.Fr_des = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.Fr = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 16
      self.body_ori_cmd = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.body_pos_cmd = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_vel_cmd = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_ang_vel_cmd = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_pos = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_vel = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.body_ori = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.body_ang_vel = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_pos_cmd = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_vel_cmd = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_acc_cmd = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_acc_numeric = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_pos = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_vel = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_local_pos = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_local_vel = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.jpos_cmd = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.jvel_cmd = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.jacc_cmd = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.jpos = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.jvel = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 12
      self.vision_loc = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.contact_est.tostring())
      buff.write(self.Fr_des.tostring())
      buff.write(self.Fr.tostring())
      buff.write(self.body_ori_cmd.tostring())
      buff.write(self.body_pos_cmd.tostring())
      buff.write(self.body_vel_cmd.tostring())
      buff.write(self.body_ang_vel_cmd.tostring())
      buff.write(self.body_pos.tostring())
      buff.write(self.body_vel.tostring())
      buff.write(self.body_ori.tostring())
      buff.write(self.body_ang_vel.tostring())
      buff.write(self.foot_pos_cmd.tostring())
      buff.write(self.foot_vel_cmd.tostring())
      buff.write(self.foot_acc_cmd.tostring())
      buff.write(self.foot_acc_numeric.tostring())
      buff.write(self.foot_pos.tostring())
      buff.write(self.foot_vel.tostring())
      buff.write(self.foot_local_pos.tostring())
      buff.write(self.foot_local_vel.tostring())
      buff.write(self.jpos_cmd.tostring())
      buff.write(self.jvel_cmd.tostring())
      buff.write(self.jacc_cmd.tostring())
      buff.write(self.jpos.tostring())
      buff.write(self.jvel.tostring())
      buff.write(self.vision_loc.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.contact_est = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
      start = end
      end += 48
      self.Fr_des = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.Fr = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 16
      self.body_ori_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.body_pos_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_vel_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_ang_vel_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.body_ori = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.body_ang_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 48
      self.foot_pos_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_vel_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_acc_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_acc_numeric = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_local_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_local_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.jpos_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.jvel_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.jacc_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.jpos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.jvel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 12
      self.vision_loc = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
