# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/spi_data_lcmt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class spi_data_lcmt(genpy.Message):
  _md5sum = "3eacff808332448ea9893245e4040882"
  _type = "lcm_to_ros/spi_data_lcmt"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          Fri Apr 16 18:27:01 2021
#
#######################################################################
float32[4]          q_abad
float32[4]          q_hip
float32[4]          q_knee
float32[4]          qd_abad
float32[4]          qd_hip
float32[4]          qd_knee
int32[4]            flags
int32               spi_driver_status
int64               timestamp_us
"""
  __slots__ = ['q_abad','q_hip','q_knee','qd_abad','qd_hip','qd_knee','flags','spi_driver_status','timestamp_us']
  _slot_types = ['float32[4]','float32[4]','float32[4]','float32[4]','float32[4]','float32[4]','int32[4]','int32','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       q_abad,q_hip,q_knee,qd_abad,qd_hip,qd_knee,flags,spi_driver_status,timestamp_us

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(spi_data_lcmt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.q_abad is None:
        self.q_abad = [0.] * 4
      if self.q_hip is None:
        self.q_hip = [0.] * 4
      if self.q_knee is None:
        self.q_knee = [0.] * 4
      if self.qd_abad is None:
        self.qd_abad = [0.] * 4
      if self.qd_hip is None:
        self.qd_hip = [0.] * 4
      if self.qd_knee is None:
        self.qd_knee = [0.] * 4
      if self.flags is None:
        self.flags = [0] * 4
      if self.spi_driver_status is None:
        self.spi_driver_status = 0
      if self.timestamp_us is None:
        self.timestamp_us = 0
    else:
      self.q_abad = [0.] * 4
      self.q_hip = [0.] * 4
      self.q_knee = [0.] * 4
      self.qd_abad = [0.] * 4
      self.qd_hip = [0.] * 4
      self.qd_knee = [0.] * 4
      self.flags = [0] * 4
      self.spi_driver_status = 0
      self.timestamp_us = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4f().pack(*self.q_abad))
      buff.write(_get_struct_4f().pack(*self.q_hip))
      buff.write(_get_struct_4f().pack(*self.q_knee))
      buff.write(_get_struct_4f().pack(*self.qd_abad))
      buff.write(_get_struct_4f().pack(*self.qd_hip))
      buff.write(_get_struct_4f().pack(*self.qd_knee))
      buff.write(_get_struct_4i().pack(*self.flags))
      _x = self
      buff.write(_get_struct_iq().pack(_x.spi_driver_status, _x.timestamp_us))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.q_abad = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.q_hip = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.q_knee = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.qd_abad = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.qd_hip = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.qd_knee = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.flags = _get_struct_4i().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.spi_driver_status, _x.timestamp_us,) = _get_struct_iq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.q_abad.tostring())
      buff.write(self.q_hip.tostring())
      buff.write(self.q_knee.tostring())
      buff.write(self.qd_abad.tostring())
      buff.write(self.qd_hip.tostring())
      buff.write(self.qd_knee.tostring())
      buff.write(self.flags.tostring())
      _x = self
      buff.write(_get_struct_iq().pack(_x.spi_driver_status, _x.timestamp_us))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.q_abad = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.q_hip = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.q_knee = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.qd_abad = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.qd_hip = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.qd_knee = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.flags = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
      _x = self
      start = end
      end += 12
      (_x.spi_driver_status, _x.timestamp_us,) = _get_struct_iq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_iq = None
def _get_struct_iq():
    global _struct_iq
    if _struct_iq is None:
        _struct_iq = struct.Struct("<iq")
    return _struct_iq
